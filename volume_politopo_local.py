import hopsy
import numpy as np
from sorting import sorteio

def vol_L(n_pontos):
	A_L= np.array([[0  , 0  , 0  , 0  , 1  , 1  , 1  , -1 ],
	[0  , 0  , 0  , 0  , 1  , -1  , 1  , 1 ],
	[0  , 0  , 0  , 0  , 1  , 1  , -1  , 1 ],
	[0  , 0  , 0  , 0  , -1  , 1  , 1  , 1 ],
	[0  , 0  , 0  , 0  , -1  , -1  , -1  , 1],
	[0  , 0  , 0  , 0  , -1  , 1  , -1  , -1 ],
	[0  , 0  , 0  , 0  , -1  , -1  , 1  , -1 ],
	[0  , 0  , 0  , 0  , 1  , -1  , -1  , -1 ],
	[0  , 0  , 0  , 0  , 0  , 0  , 0  , 0 ],
	[0  , 0  , 0  , 0  , 0  , 0  , 0  , 0 ],
	[0  , 0  , 0  , 0  , 0  , 0  , 0  , 0 ],
	[0  , 0  , 0  , 0  , 0  , 0  , 0  , 0 ],
	[0  , 0  , 0  , 0  , 0  , 0  , 0  , 0 ],
	[0  , 0  , 0  , 0  , 0  , 0  , 0  , 0 ],
	[0  , 0  , 0  , 0  , 0  , 0  , 0  , 0 ],
	[0  , 0  , 0  , 0  , 0  , 0  , 0  , 0 ]])

	b_L = np.array([[2],[2],[2],[2],[2],[2],[2],[2],[0],[0],[0],[0],[0],[0],[0],[0]])

	A_NS = np.array([[-0.25, -0.  , -0.25, -0.  , -0.25, -0.  , -0.  , -0.  ],
	       [-0.25, -0.  ,  0.25, -0.  ,  0.25, -0.  , -0.  , -0.  ],
	       [ 0.25, -0.  , -0.25, -0.  ,  0.25, -0.  , -0.  , -0.  ],
	       [ 0.25, -0.  ,  0.25, -0.  , -0.25, -0.  , -0.  , -0.  ],
	       [-0.25, -0.  , -0.  , -0.25, -0.  , -0.25, -0.  , -0.  ],
	       [-0.25, -0.  , -0.  ,  0.25, -0.  ,  0.25, -0.  , -0.  ],
	       [ 0.25, -0.  , -0.  , -0.25, -0.  ,  0.25, -0.  , -0.  ],
	       [ 0.25, -0.  , -0.  ,  0.25, -0.  , -0.25, -0.  , -0.  ],
	       [-0.  , -0.25, -0.25, -0.  , -0.  , -0.  , -0.25, -0.  ],
	       [-0.  , -0.25,  0.25, -0.  , -0.  , -0.  ,  0.25, -0.  ],
	       [-0.  ,  0.25, -0.25, -0.  , -0.  , -0.  ,  0.25, -0.  ],
	       [-0.  ,  0.25,  0.25, -0.  , -0.  , -0.  , -0.25, -0.  ],
	       [-0.  , -0.25, -0.  , -0.25, -0.  , -0.  , -0.  , -0.25],
	       [-0.  , -0.25, -0.  ,  0.25, -0.  , -0.  , -0.  ,  0.25],
	       [-0.  ,  0.25, -0.  , -0.25, -0.  , -0.  , -0.  ,  0.25],
	       [-0.  ,  0.25, -0.  ,  0.25, -0.  , -0.  , -0.  , -0.25]])
	       

	b_NS = (1/4)*np.array([[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1]])

	sorteio_NS = sorteio(A_NS,b_NS,n_pontos)

	A0 = sorteio_NS[0][:,0]
	A1 = sorteio_NS[0][:,1]
	B0 = sorteio_NS[0][:,2]
	B1 = sorteio_NS[0][:,3]
	A0B0 = sorteio_NS[0][:,4]
	A0B1 = sorteio_NS[0][:,5]
	A1B0 = sorteio_NS[0][:,6]
	A1B1 = sorteio_NS[0][:,7]

	aux = []
	n_locais = 0

	for i in range(len(A0)):
	    P = np.array([A0[i],A1[i],B0[i],B1[i],A0B0[i],A0B1[i],A1B0[i],A1B1[i]])
	    aux = np.where(np.dot(A_L,P) <= 2)
	    
	    if len(aux[0]) == 16: n_locais += 1
		
		
	return (100*n_locais/n_pontos)        



